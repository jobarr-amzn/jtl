/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'michael' at '26/04/15 10:24 AM' with Gradle 2.3
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.3/userguide/tutorial_java_projects.html
 */


// In this section you declare where to find the dependencies of your project
repositories {
	 maven {
		url "http://nexus.ailis.de/content/groups/public"
	 }
    jcenter()
}


buildscript {
    repositories {
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
    }

    dependencies {
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1.1-SNAPSHOT'	
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'me.champeau.gradle.antlr4'

compileJava {
	sourceCompatibility=1.8
	targetCompatibility=1.8
}

mainClassName = "org.dykman.jtl.JtlMain"

sourceSets {
    main {
        java {
            srcDirs += "src/main/antlr"
        }
    }
}

eclipse {
	jdt {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}
}

antlr4 {
   source = file "src/main/antlr"
   output = file "target/generated-sources/antlr4/org/dykman/jtl"
   listener = false
   extraArgs = ['-package', "org.dykman.jtl"]
}


dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    
    compile 'com.google.guava:guava:18.0'
    
    compile 'com.zaxxer:HikariCP:2.3.8'
    compile 'mysql:mysql-connector-java:5.1.35'
    compile 'postgresql:postgresql:9.1-901-1.jdbc4'

    compile 'org.xerial:sqlite-jdbc:3.8.10.1'
    runtime 'org.xerial:sqlite-jdbc:3.8.10.1'


    compile 'org.antlr:antlr4:4.5'
    compile 'org.antlr:antlr4-runtime:4.5'
    compile 'org.codehaus.jettison:jettison:1.3.7'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-io:commons-io:2.4'
//	 compile 'gnu.getopt:java-getopt:1.0.13'



	compile 'commons-cli:commons-cli:1.3.1'

   compile 'commons-httpclient:commons-httpclient:3.1'
	compile 'org.apache.solr:solr-solrj:5.2.1'


	compile 'org.eclipse.jetty:jetty-server:9.3.1.v20150714'
	compile 'org.eclipse.jetty:jetty-servlet:9.3.1.v20150714'
	runtime 'org.eclipse.jetty:jetty-servlet:9.3.1.v20150714'


    testCompile "junit:junit:4.11"
}

/*
jar {
  manifest { 
    attributes "Main-Class": "org.dykman.jtl.core.JtlMain"
  }  

  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}
*/
compileJava.dependsOn antlr4

sourceSets.main.java.srcDirs += "target/generated-sources/antlr4"

configurations {
   compile.extendsFrom antlr4
}

clean {
    delete += fileTree(antlr4.output).include('**/*')
}

clean.dependsOn cleanCompileJava

/*
task execute( dependsOn: 'compileJava', type:JavaExec) {
   classpath = sourceSets.main.runtimeClasspath
	classpath.add(files("bin"))

	def jtl = System.getProperty("script")
	def conf = System.getProperty("config") 
	conf = conf == null ? "src/test/resources/config.json" : conf
	def data = System.getProperty("data") 
	data = data == null ? "src/test/resources/generated.json" : data
	
   main = "SimpleJtlTest"

	args jtl
	args data
	args conf

//   args "src/test/resources/sx.jtl"  
//   args "src/test/resources/data.json"

//   args "src/test/resources/simple.jtl"  
//   args "src/test/resources/data.json"

//   args "src/test/resources/n.jtl"  
//   args "src/test/resources/generated.json"

//   args "src/test/resources/jdbc.jtl"  
//   args "src/test/resources/data.json"

//   args "src/test/resources/string.jtl"  
 //  args "src/test/resources/generated.json"

//   args "src/test/resources/simple.jtl"  
//   args "src/test/resources/data.json"

//   args "src/test/resources/re.jtl"  
 //  args "src/test/resources/generated.json"

//   args "src/test/resources/sqlite.jtl"  
//   args "src/test/resources/generated.json"

//   args "src/test/resources/config.json"
}
*/
