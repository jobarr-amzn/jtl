/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'michael' at '26/04/15 10:24 AM' with Gradle 2.3
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.3/userguide/tutorial_java_projects.html
 */

group='org.dykman'
version='0.9.8'



configurations {
//	all*.exclude ''
}

// In this section you declare where to find the dependencies of your project
repositories {
	 maven {
		url "http://nexus.ailis.de/content/groups/public"
	}
	maven {
		url "http://central.maven.org/maven2/"
	}
	/*
	maven {
		url "http://repository.mapr.com/nexus/content/repositories/drill/"
	}
	maven {
		url "http://repository.mapr.com/nexus/content/repositories/drill-optiq/"
	}
	maven {
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		url "http://conjars.org/repo"
	}
	*/
//	maven {
//	 	url "http://repo.pentaho.org/artifactory/repo"
//	 } 
    jcenter()
}


buildscript {
    repositories {
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
    }

    dependencies {
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1.1-SNAPSHOT'	
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'me.champeau.gradle.antlr4'


uploadArchives {
    repositories.mavenDeployer {
        repository(url: "file:///home/michael/projects/mvn-repo/")
    }
}

compileJava {
	sourceCompatibility=1.8
	targetCompatibility=1.8
}

mainClassName = "org.dykman.jtl.JtlMain"
applicationName = "jtl"
applicationDefaultJvmArgs=["-DJTL_HOME=MY_APP_HOME"]

sourceSets {
    main {
        java {
            srcDirs += "src/main/antlr"
        }
    }
}

eclipse {
	jdt {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}
}

antlr4 {
   source = file "src/main/antlr"
   output = file "target/generated-sources/antlr4/org/dykman/jtl"
   listener = false
   extraArgs = ['-package', "org.dykman.jtl"]
}


dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
	 runtime 'org.slf4j:slf4j-log4j12:1.7.12'

	compile 'log4j:log4j:1.2.7'

	 runtime 'org.postgresql:postgresql:9.4-1203-jdbc42'

    
    compile 'com.google.guava:guava:18.0'
    runtime 'com.google.guava:guava:18.0'
    
    compile 'com.zaxxer:HikariCP:2.4.1'
    runtime 'com.zaxxer:HikariCP:2.4.1'

	 // jdbc drivers
    runtime 'mysql:mysql-connector-java:5.1.35'
    runtime 'postgresql:postgresql:9.1-901-1.jdbc4'
    runtime 'org.xerial:sqlite-jdbc:3.8.10.1'
	runtime 'org.apache.phoenix:phoenix:4.5.2-HBase-1.1'
//	runtime 'org.apache.hive:hive-jdbc:1.2.1'
//	runtime 'org.apache.drill.exec:drill-jdbc:1.1.0'
//	runtime 'org.apache.solr:solr-solrj:5.2.1'

    compile 'org.antlr:antlr4:4.5'
    runtime 'org.antlr:antlr4-runtime:4.5'

    compile 'org.apache.commons:commons-lang3:3.4'
    runtime 'org.apache.commons:commons-lang3:3.4'
	 compile 'org.apache.commons:commons-csv:1.2'
	 runtime 'org.apache.commons:commons-csv:1.2'
    compile 'commons-io:commons-io:2.4'
    runtime 'commons-io:commons-io:2.4'

	compile 'commons-cli:commons-cli:1.3.1'
	runtime 'commons-cli:commons-cli:1.3.1'

   compile 'commons-httpclient:commons-httpclient:3.1'
   runtime 'commons-httpclient:commons-httpclient:3.1'


	// 9.3.1.v20150714
   // 9.3.4.v20151007
	// 9.3.5.v20151012
	compile 'org.eclipse.jetty:jetty-server:9.3.5.v20151012'
	compile 'org.eclipse.jetty:jetty-servlet:9.3.5.v20151012'

    testCompile "junit:junit:4.12"
}

compileJava.dependsOn antlr4

sourceSets.main.java.srcDirs += "target/generated-sources/antlr4"

configurations {
   compile.extendsFrom antlr4
}

clean {
    delete += fileTree(antlr4.output).include('**/*')
}

clean.dependsOn cleanCompileJava

startScripts {
	doLast {
	unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME') 
		windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%~dp0..')
	}
}

distZip {
//    into(project.name) {
    into("${project.name}-${version}") {
        from '.'
        include 'conf/*'
    }
}
